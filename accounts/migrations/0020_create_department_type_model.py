# Generated by Django 5.2.3 on 2025-07-12 06:54

import django.db.models.deletion
from django.db import migrations, models


def create_department_types(apps, schema_editor):
    """Δημιουργία αρχικών τύπων τμημάτων"""
    DepartmentType = apps.get_model('accounts', 'DepartmentType')
    
    # Δημιουργία των αρχικών τύπων τμημάτων
    department_types = [
        ('DIRECTION', 'Διεύθυνση'),
        ('AUTONOMOUS_DIRECTION', 'Αυτοτελής Διεύθυνση'),
        ('DEPARTMENT', 'Τμήμα'),
        ('OFFICE', 'Γραφείο'),
        ('VIRTUAL_DEPARTMENT', 'Εικονικό Τμήμα'),
    ]
    
    for code, name in department_types:
        DepartmentType.objects.get_or_create(
            code=code,
            defaults={
                'name': name,
                'description': f'Αυτόματα δημιουργημένος τύπος: {name}',
                'is_active': True
            }
        )


def migrate_department_types(apps, schema_editor):
    """Μετακίνηση των department types από CharField σε ForeignKey"""
    Department = apps.get_model('accounts', 'Department')
    DepartmentType = apps.get_model('accounts', 'DepartmentType')
    
    for department in Department.objects.all():
        if hasattr(department, 'department_type_old') and department.department_type_old:  # το παλιό field
            try:
                dept_type = DepartmentType.objects.get(code=department.department_type_old)
                department.department_type_new = dept_type
                department.save()
            except DepartmentType.DoesNotExist:
                # Fallback σε default τύπο
                dept_type, created = DepartmentType.objects.get_or_create(
                    code='OTHER',
                    defaults={'name': 'Άλλο', 'description': 'Fallback τύπος', 'is_active': True}
                )
                department.department_type_new = dept_type
                department.save()
        else:
            # Αν δεν υπάρχει παλιό field, βάλε default
            dept_type, created = DepartmentType.objects.get_or_create(
                code='DEPARTMENT',
                defaults={'name': 'Τμήμα', 'description': 'Default τύπος τμήματος', 'is_active': True}
            )
            department.department_type_new = dept_type
            department.save()


def reverse_migrate_department_types(apps, schema_editor):
    """Αντίστροφη μετακίνηση"""
    Department = apps.get_model('accounts', 'Department')
    
    for department in Department.objects.all():
        if department.department_type_new:
            department.department_type_old = department.department_type_new.code
            department.save()


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0019_populate_user_fields'),
    ]

    operations = [
        # 1. Δημιουργία του DepartmentType model
        migrations.CreateModel(
            name='DepartmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=30, unique=True, verbose_name='Κωδικός Τύπου')),
                ('name', models.CharField(max_length=100, verbose_name='Όνομα Τύπου')),
                ('description', models.TextField(blank=True, verbose_name='Περιγραφή')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ενεργός')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Ημερομηνία Δημιουργίας')),
            ],
            options={
                'verbose_name': 'Τύπος Τμήματος',
                'verbose_name_plural': 'Τύποι Τμημάτων',
                'ordering': ['name'],
            },
        ),
        
        # 2. Δημιουργία αρχικών τύπων τμημάτων
        migrations.RunPython(create_department_types, migrations.RunPython.noop),
        
        # 3. Μετονομασία του παλιού field
        migrations.RenameField(
            model_name='department',
            old_name='department_type',
            new_name='department_type_old',
        ),
        
        # 4. Προσθήκη του νέου ForeignKey field
        migrations.AddField(
            model_name='department',
            name='department_type_new',
            field=models.ForeignKey(
                null=True, blank=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='departments',
                to='accounts.departmenttype',
                verbose_name='Τύπος Τμήματος'
            ),
        ),
        
        # 5. Μετακίνηση δεδομένων
        migrations.RunPython(migrate_department_types, reverse_migrate_department_types),
        
        # 6. Διαγραφή του παλιού field
        migrations.RemoveField(
            model_name='department',
            name='department_type_old',
        ),
        
        # 7. Μετονομασία του νέου field στο σωστό όνομα
        migrations.RenameField(
            model_name='department',
            old_name='department_type_new',
            new_name='department_type',
        ),
        
        # 8. Τροποποίηση του field για να γίνει required (αφαίρεση null/blank)
        migrations.AlterField(
            model_name='department',
            name='department_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name='departments',
                to='accounts.departmenttype',
                verbose_name='Τύπος Τμήματος'
            ),
        ),
    ]
